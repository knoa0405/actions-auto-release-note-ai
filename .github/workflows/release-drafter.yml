name: Release Drafter

on:
  push:
    # branches to consider in the event; optional, defaults to all
    branches:
      - main
  # pull_request event is required only for autolabeler
  pull_request:
    # Only following types are handled by the action, but one can default to all as well
    types: [opened, reopened, synchronize]
  # pull_request_target event is required for autolabeler to support PRs from forks
  # pull_request_target:
  #   types: [opened, reopened, synchronize]

permissions:
  contents: read

jobs:
  update_release_draft:
    permissions:
      # write permission is required to create a GitHub release
      contents: write
      # write permission is required for autolabeler
      # otherwise, read permission is required at least
      pull-requests: write
    runs-on: ubuntu-latest
    steps:
      - name: Get latest release tag
        id: version
        run: |
          # Debug: Check what's available
          echo "Repository: ${{ github.repository }}"
          echo "GitHub token available: ${{ secrets.GITHUB_TOKEN != '' }}"

          # Try different methods to get tags
          echo "=== Method 1: Check all releases ==="
          ALL_RELEASES=$(gh api repos/${{ github.repository }}/releases --jq '.[0].tag_name' 2>/dev/null || echo "No releases found")
          echo "All releases first tag: $ALL_RELEASES"

          echo "=== Method 2: Check latest release ==="
          LATEST_TAG=$(gh api repos/${{ github.repository }}/releases/latest --jq .tag_name 2>/dev/null || echo "No latest release")
          echo "Latest release tag: $LATEST_TAG"

          echo "=== Method 3: Check git tags ==="
          git fetch --tags
          GIT_TAGS=$(git tag --sort=-version:refname | head -1 || echo "No git tags")
          echo "Latest git tag: $GIT_TAGS"

          # Use the first available tag
          if [ "$LATEST_TAG" != "No latest release" ] && [ "$LATEST_TAG" != "null" ]; then
            echo "Using latest release tag: $LATEST_TAG"
            echo "tag=${LATEST_TAG}" >> $GITHUB_OUTPUT
            echo "version=${LATEST_TAG}" >> $GITHUB_OUTPUT
          elif [ "$ALL_RELEASES" != "No releases found" ] && [ "$ALL_RELEASES" != "null" ]; then
            echo "Using first available release tag: $ALL_RELEASES"
            echo "tag=${ALL_RELEASES}" >> $GITHUB_OUTPUT
            echo "version=${ALL_RELEASES}" >> $GITHUB_OUTPUT
          elif [ "$GIT_TAGS" != "No git tags" ]; then
            echo "Using latest git tag: $GIT_TAGS"
            echo "tag=${GIT_TAGS}" >> $GITHUB_OUTPUT
            echo "version=${GIT_TAGS}" >> $GITHUB_OUTPUT
          else
            echo "No tags found anywhere, creating initial version"
            echo "tag=v0.0.1" >> $GITHUB_OUTPUT
            echo "version=v0.0.1" >> $GITHUB_OUTPUT
          fi

      # (Optional) GitHub Enterprise requires GHE_HOST variable set
      #- name: Set GHE_HOST
      #  run: |
      #    echo "GHE_HOST=${GITHUB_SERVER_URL##https:\/\/}" >> $GITHUB_ENV

      # Drafts your next Release notes as Pull Requests are merged into "master"
      - uses: release-drafter/release-drafter@v5
        with:
          tag: ${{ steps.version.outputs.tag }}
          name: ${{ steps.version.outputs.tag }} ðŸŒˆ
          version: ${{ steps.version.outputs.tag }}
        # (Optional) specify config name to use, relative to .github/. Default: release-drafter.yml
        # with:
        #   config-name: my-config.yml
        #   disable-autolabeler: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
